{
  "id": "0448fa51-0acb-48b3-86e2-ab3317f2ff8a",
  "data": {
    "nodes": [
      {
        "id": "ChatInput-zVDjM",
        "type": "genericNode",
        "position": {
          "x": 222.27668195942454,
          "y": 1619.0138285418132
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "files": {
                "trace_as_metadata": true,
                "file_path": "",
                "fileTypes": [
                  "txt",
                  "md",
                  "mdx",
                  "csv",
                  "json",
                  "yaml",
                  "yml",
                  "xml",
                  "html",
                  "htm",
                  "pdf",
                  "docx",
                  "py",
                  "sh",
                  "sql",
                  "js",
                  "ts",
                  "tsx",
                  "jpg",
                  "jpeg",
                  "png",
                  "bmp",
                  "image"
                ],
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "files",
                "value": "",
                "display_name": "Files",
                "advanced": true,
                "dynamic": false,
                "info": "Files to be sent with the message.",
                "title_case": false,
                "type": "file",
                "_input_type": "FileInput"
              },
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.data.utils import IMG_FILE_TYPES, TEXT_FILE_TYPES\nfrom langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import (\n    DropdownInput,\n    FileInput,\n    MessageTextInput,\n    MultilineInput,\n    Output,\n)\nfrom langflow.schema.message import Message\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_USER,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatInput(ChatComponent):\n    display_name = \"Chat Input\"\n    description = \"Get chat inputs from the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatInput\"\n    minimized = True\n\n    inputs = [\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            value=\"\",\n            info=\"Message to be passed as input.\",\n            input_types=[],\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_USER,\n            info=\"Type of sender.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_USER,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        FileInput(\n            name=\"files\",\n            display_name=\"Files\",\n            file_types=TEXT_FILE_TYPES + IMG_FILE_TYPES,\n            info=\"Files to be sent with the message.\",\n            advanced=True,\n            is_list=True,\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Message\", name=\"message\", method=\"message_response\"),\n    ]\n\n    async def message_response(self) -> Message:\n        background_color = self.background_color\n        text_color = self.text_color\n        icon = self.chat_icon\n\n        message = await Message.create(\n            text=self.input_value,\n            sender=self.sender,\n            sender_name=self.sender_name,\n            session_id=self.session_id,\n            files=self.files,\n            properties={\n                \"background_color\": background_color,\n                \"text_color\": text_color,\n                \"icon\": icon,\n            },\n        )\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "MSFT",
                "display_name": "Text",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "Message to be passed as input.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "User",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Get chat inputs from the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "user_input",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "files",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.post1"
          },
          "showNode": true,
          "type": "ChatInput",
          "id": "ChatInput-zVDjM"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 229
        }
      },
      {
        "id": "Agent-KPmxD",
        "type": "genericNode",
        "position": {
          "x": 1639.4666461389675,
          "y": 1124.223333001053
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "memory": {
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "memory",
                "value": "",
                "display_name": "External Memory",
                "advanced": true,
                "input_types": [
                  "Memory"
                ],
                "dynamic": false,
                "info": "Retrieve messages from an external memory. If empty, it will use the Langflow tables.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "tools": {
                "trace_as_metadata": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools",
                "value": "",
                "display_name": "Tools",
                "advanced": false,
                "input_types": [
                  "Tool"
                ],
                "dynamic": false,
                "info": "These are the tools that the agent can use to help with tasks.",
                "title_case": false,
                "type": "other",
                "_input_type": "HandleInput"
              },
              "add_current_date_tool": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "add_current_date_tool",
                "value": true,
                "display_name": "Current Date",
                "advanced": true,
                "dynamic": false,
                "info": "If true, will add a tool to the agent that returns the current date.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "agent_description": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_description",
                "value": "A helpful assistant with access to the following tools:",
                "display_name": "Agent Description [Deprecated]",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The description of the agent. This is only used when in Tool Mode. Defaults to 'A helpful assistant with access to the following tools:' and tools are added dynamically. This feature is deprecated and will be removed in future versions.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "agent_llm": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Amazon Bedrock",
                  "Anthropic",
                  "Azure OpenAI",
                  "Google Generative AI",
                  "Groq",
                  "NVIDIA",
                  "OpenAI",
                  "SambaNova",
                  "Custom"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "agent_llm",
                "value": "OpenAI",
                "display_name": "Language Model",
                "advanced": false,
                "input_types": [],
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langchain_core.tools import StructuredTool\n\nfrom langflow.base.agents.agent import LCToolsAgentComponent\nfrom langflow.base.agents.events import ExceptionWithMessageError\nfrom langflow.base.models.model_input_constants import (\n    ALL_PROVIDER_FIELDS,\n    MODEL_DYNAMIC_UPDATE_FIELDS,\n    MODEL_PROVIDERS_DICT,\n)\nfrom langflow.base.models.model_utils import get_model_name\nfrom langflow.components.helpers import CurrentDateComponent\nfrom langflow.components.helpers.memory import MemoryComponent\nfrom langflow.components.langchain_utilities.tool_calling import ToolCallingAgentComponent\nfrom langflow.custom.custom_component.component import _get_component_toolkit\nfrom langflow.custom.utils import update_component_build_config\nfrom langflow.field_typing import Tool\nfrom langflow.io import BoolInput, DropdownInput, MultilineInput, Output\nfrom langflow.logging import logger\nfrom langflow.schema.dotdict import dotdict\nfrom langflow.schema.message import Message\n\n\ndef set_advanced_true(component_input):\n    component_input.advanced = True\n    return component_input\n\n\nclass AgentComponent(ToolCallingAgentComponent):\n    display_name: str = \"Agent\"\n    description: str = \"Define the agent's instructions, then enter a task to complete using tools.\"\n    icon = \"bot\"\n    beta = False\n    name = \"Agent\"\n\n    memory_inputs = [set_advanced_true(component_input) for component_input in MemoryComponent().inputs]\n\n    inputs = [\n        DropdownInput(\n            name=\"agent_llm\",\n            display_name=\"Model Provider\",\n            info=\"The provider of the language model that the agent will use to generate responses.\",\n            options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n            value=\"OpenAI\",\n            real_time_refresh=True,\n            input_types=[],\n        ),\n        *MODEL_PROVIDERS_DICT[\"OpenAI\"][\"inputs\"],\n        MultilineInput(\n            name=\"system_prompt\",\n            display_name=\"Agent Instructions\",\n            info=\"System Prompt: Initial instructions and context provided to guide the agent's behavior.\",\n            value=\"You are a helpful assistant that can use tools to answer questions and perform tasks.\",\n            advanced=False,\n        ),\n        *LCToolsAgentComponent._base_inputs,\n        *memory_inputs,\n        BoolInput(\n            name=\"add_current_date_tool\",\n            display_name=\"Current Date\",\n            advanced=True,\n            info=\"If true, will add a tool to the agent that returns the current date.\",\n            value=True,\n        ),\n    ]\n    outputs = [Output(name=\"response\", display_name=\"Response\", method=\"message_response\")]\n\n    async def message_response(self) -> Message:\n        try:\n            # Get LLM model and validate\n            llm_model, display_name = self.get_llm()\n            if llm_model is None:\n                msg = \"No language model selected. Please choose a model to proceed.\"\n                raise ValueError(msg)\n            self.model_name = get_model_name(llm_model, display_name=display_name)\n\n            # Get memory data\n            self.chat_history = await self.get_memory_data()\n\n            # Add current date tool if enabled\n            if self.add_current_date_tool:\n                if not isinstance(self.tools, list):  # type: ignore[has-type]\n                    self.tools = []\n                current_date_tool = (await CurrentDateComponent(**self.get_base_args()).to_toolkit()).pop(0)\n                if not isinstance(current_date_tool, StructuredTool):\n                    msg = \"CurrentDateComponent must be converted to a StructuredTool\"\n                    raise TypeError(msg)\n                self.tools.append(current_date_tool)\n\n            # Validate tools\n            if not self.tools:\n                msg = \"Tools are required to run the agent. Please add at least one tool.\"\n                raise ValueError(msg)\n\n            # Set up and run agent\n            self.set(\n                llm=llm_model,\n                tools=self.tools,\n                chat_history=self.chat_history,\n                input_value=self.input_value,\n                system_prompt=self.system_prompt,\n            )\n            agent = self.create_agent_runnable()\n            return await self.run_agent(agent)\n\n        except (ValueError, TypeError, KeyError) as e:\n            logger.error(f\"{type(e).__name__}: {e!s}\")\n            raise\n        except ExceptionWithMessageError as e:\n            logger.error(f\"ExceptionWithMessageError occurred: {e}\")\n            raise\n        except Exception as e:\n            logger.error(f\"Unexpected error: {e!s}\")\n            raise\n\n    async def get_memory_data(self):\n        memory_kwargs = {\n            component_input.name: getattr(self, f\"{component_input.name}\") for component_input in self.memory_inputs\n        }\n        # filter out empty values\n        memory_kwargs = {k: v for k, v in memory_kwargs.items() if v}\n\n        return await MemoryComponent(**self.get_base_args()).set(**memory_kwargs).retrieve_messages()\n\n    def get_llm(self):\n        if not isinstance(self.agent_llm, str):\n            return self.agent_llm, None\n\n        try:\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if not provider_info:\n                msg = f\"Invalid model provider: {self.agent_llm}\"\n                raise ValueError(msg)\n\n            component_class = provider_info.get(\"component_class\")\n            display_name = component_class.display_name\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\", \"\")\n\n            return self._build_llm_model(component_class, inputs, prefix), display_name\n\n        except Exception as e:\n            logger.error(f\"Error building {self.agent_llm} language model: {e!s}\")\n            msg = f\"Failed to initialize language model: {e!s}\"\n            raise ValueError(msg) from e\n\n    def _build_llm_model(self, component, inputs, prefix=\"\"):\n        model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n        return component.set(**model_kwargs).build_model()\n\n    def set_component_params(self, component):\n        provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n        if provider_info:\n            inputs = provider_info.get(\"inputs\")\n            prefix = provider_info.get(\"prefix\")\n            model_kwargs = {input_.name: getattr(self, f\"{prefix}{input_.name}\") for input_ in inputs}\n\n            return component.set(**model_kwargs)\n        return component\n\n    def delete_fields(self, build_config: dotdict, fields: dict | list[str]) -> None:\n        \"\"\"Delete specified fields from build_config.\"\"\"\n        for field in fields:\n            build_config.pop(field, None)\n\n    def update_input_types(self, build_config: dotdict) -> dotdict:\n        \"\"\"Update input types for all fields in build_config.\"\"\"\n        for key, value in build_config.items():\n            if isinstance(value, dict):\n                if value.get(\"input_types\") is None:\n                    build_config[key][\"input_types\"] = []\n            elif hasattr(value, \"input_types\") and value.input_types is None:\n                value.input_types = []\n        return build_config\n\n    async def update_build_config(\n        self, build_config: dotdict, field_value: str, field_name: str | None = None\n    ) -> dotdict:\n        # Iterate over all providers in the MODEL_PROVIDERS_DICT\n        # Existing logic for updating build_config\n        if field_name in (\"agent_llm\",):\n            build_config[\"agent_llm\"][\"value\"] = field_value\n            provider_info = MODEL_PROVIDERS_DICT.get(field_value)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call the component class's update_build_config method\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n\n            provider_configs: dict[str, tuple[dict, list[dict]]] = {\n                provider: (\n                    MODEL_PROVIDERS_DICT[provider][\"fields\"],\n                    [\n                        MODEL_PROVIDERS_DICT[other_provider][\"fields\"]\n                        for other_provider in MODEL_PROVIDERS_DICT\n                        if other_provider != provider\n                    ],\n                )\n                for provider in MODEL_PROVIDERS_DICT\n            }\n            if field_value in provider_configs:\n                fields_to_add, fields_to_delete = provider_configs[field_value]\n\n                # Delete fields from other providers\n                for fields in fields_to_delete:\n                    self.delete_fields(build_config, fields)\n\n                # Add provider-specific fields\n                if field_value == \"OpenAI\" and not any(field in build_config for field in fields_to_add):\n                    build_config.update(fields_to_add)\n                else:\n                    build_config.update(fields_to_add)\n                # Reset input types for agent_llm\n                build_config[\"agent_llm\"][\"input_types\"] = []\n            elif field_value == \"Custom\":\n                # Delete all provider fields\n                self.delete_fields(build_config, ALL_PROVIDER_FIELDS)\n                # Update with custom component\n                custom_component = DropdownInput(\n                    name=\"agent_llm\",\n                    display_name=\"Language Model\",\n                    options=[*sorted(MODEL_PROVIDERS_DICT.keys()), \"Custom\"],\n                    value=\"Custom\",\n                    real_time_refresh=True,\n                    input_types=[\"LanguageModel\"],\n                )\n                build_config.update({\"agent_llm\": custom_component.to_dict()})\n            # Update input types for all fields\n            build_config = self.update_input_types(build_config)\n\n            # Validate required keys\n            default_keys = [\n                \"code\",\n                \"_type\",\n                \"agent_llm\",\n                \"tools\",\n                \"input_value\",\n                \"add_current_date_tool\",\n                \"system_prompt\",\n                \"agent_description\",\n                \"max_iterations\",\n                \"handle_parsing_errors\",\n                \"verbose\",\n            ]\n            missing_keys = [key for key in default_keys if key not in build_config]\n            if missing_keys:\n                msg = f\"Missing required keys in build_config: {missing_keys}\"\n                raise ValueError(msg)\n        if (\n            isinstance(self.agent_llm, str)\n            and self.agent_llm in MODEL_PROVIDERS_DICT\n            and field_name in MODEL_DYNAMIC_UPDATE_FIELDS\n        ):\n            provider_info = MODEL_PROVIDERS_DICT.get(self.agent_llm)\n            if provider_info:\n                component_class = provider_info.get(\"component_class\")\n                component_class = self.set_component_params(component_class)\n                prefix = provider_info.get(\"prefix\")\n                if component_class and hasattr(component_class, \"update_build_config\"):\n                    # Call each component class's update_build_config method\n                    # remove the prefix from the field_name\n                    if isinstance(field_name, str) and isinstance(prefix, str):\n                        field_name = field_name.replace(prefix, \"\")\n                    build_config = await update_component_build_config(\n                        component_class, build_config, field_value, \"model_name\"\n                    )\n        return dotdict({k: v.to_dict() if hasattr(v, \"to_dict\") else v for k, v in build_config.items()})\n\n    async def to_toolkit(self) -> list[Tool]:\n        component_toolkit = _get_component_toolkit()\n        tools_names = self._build_tools_names()\n        agent_description = self.get_tool_description()\n        # TODO: Agent Description Depreciated Feature to be removed\n        description = f\"{agent_description}{tools_names}\"\n        tools = component_toolkit(component=self).get_tools(\n            tool_name=self.get_tool_name(), tool_description=description, callbacks=self.get_langchain_callbacks()\n        )\n        if hasattr(self, \"tools_metadata\"):\n            tools = component_toolkit(component=self, metadata=self.tools_metadata).update_tools_metadata(tools=tools)\n        return tools\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "input_types": []
              },
              "handle_parsing_errors": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "handle_parsing_errors",
                "value": true,
                "display_name": "Handle Parse Errors",
                "advanced": true,
                "dynamic": false,
                "info": "Should the Agent fix errors when reading user input for better processing?",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The input provided by the user for the agent to process.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "max_iterations": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_iterations",
                "value": 15,
                "display_name": "Max Iterations",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of attempts the agent can make to complete its task before it stops.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "n_messages": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "n_messages",
                "value": 100,
                "display_name": "Number of Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Number of messages to retrieve.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "order": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "Ascending",
                  "Descending"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "order",
                "value": "Ascending",
                "display_name": "Order",
                "advanced": true,
                "dynamic": false,
                "info": "Order of the messages.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User",
                  "Machine and User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine and User",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Filter by sender type.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Filter by sender name.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "system_prompt": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "system_prompt",
                "value": "You are a helpful assistant that can use tools to answer questions and perform tasks.",
                "display_name": "Agent Instructions",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "System Prompt: Initial instructions and context provided to guide the agent's behavior.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "{sender_name}: {text}",
                "display_name": "Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The template to use for formatting the data. It can contain the keys {text}, {sender} or any other key in the message data.",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "verbose": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "verbose",
                "value": true,
                "display_name": "Verbose",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "max_tokens": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 128000,
                  "step": 0.1
                },
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_tokens",
                "value": "",
                "display_name": "Max Tokens",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of tokens to generate. Set to 0 for unlimited tokens.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "model_kwargs": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_kwargs",
                "value": {},
                "display_name": "Model Kwargs",
                "advanced": true,
                "dynamic": false,
                "info": "Additional keyword arguments to pass to the model.",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput",
                "input_types": []
              },
              "json_mode": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "json_mode",
                "value": false,
                "display_name": "JSON Mode",
                "advanced": true,
                "dynamic": false,
                "info": "If True, it will output JSON regardless of passing a schema.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput",
                "input_types": []
              },
              "model_name": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "gpt-4o-mini",
                  "gpt-4o",
                  "gpt-4-turbo",
                  "gpt-4-turbo-preview",
                  "gpt-4",
                  "gpt-3.5-turbo",
                  "gpt-3.5-turbo-0125"
                ],
                "options_metadata": [],
                "combobox": true,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "model_name",
                "value": "gpt-4o",
                "display_name": "Model Name",
                "advanced": false,
                "dynamic": false,
                "info": "To see the model names, first choose a provider. Then, enter your API key and click the refresh button next to the model name.",
                "real_time_refresh": false,
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput",
                "input_types": []
              },
              "openai_api_base": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "openai_api_base",
                "value": "",
                "display_name": "OpenAI API Base",
                "advanced": true,
                "dynamic": false,
                "info": "The base URL of the OpenAI API. Defaults to https://api.openai.com/v1. You can change this to use other APIs like JinaChat, LocalAI and Prem.",
                "title_case": false,
                "type": "str",
                "_input_type": "StrInput",
                "input_types": []
              },
              "api_key": {
                "load_from_db": false,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "api_key",
                "value": "",
                "display_name": "OpenAI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The OpenAI API Key to use for the OpenAI model.",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "temperature": {
                "tool_mode": false,
                "min_label": "",
                "max_label": "",
                "min_label_icon": "",
                "max_label_icon": "",
                "slider_buttons": false,
                "slider_buttons_options": [],
                "slider_input": false,
                "range_spec": {
                  "step_type": "float",
                  "min": 0,
                  "max": 2,
                  "step": 0.01
                },
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "temperature",
                "value": 0.1,
                "display_name": "Temperature",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "slider",
                "_input_type": "SliderInput",
                "input_types": []
              },
              "seed": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "seed",
                "value": 1,
                "display_name": "Seed",
                "advanced": true,
                "dynamic": false,
                "info": "The seed controls the reproducibility of the job.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "max_retries": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_retries",
                "value": 5,
                "display_name": "Max Retries",
                "advanced": true,
                "dynamic": false,
                "info": "The maximum number of retries to make when generating.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              },
              "timeout": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timeout",
                "value": 700,
                "display_name": "Timeout",
                "advanced": true,
                "dynamic": false,
                "info": "The timeout for requests to OpenAI completion API.",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput",
                "input_types": []
              }
            },
            "description": "Define the agent's instructions, then enter a task to complete using tools.",
            "icon": "bot",
            "base_classes": [
              "Message"
            ],
            "display_name": "Agent",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "response",
                "hidden": null,
                "display_name": "Response",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "agent_llm",
              "max_tokens",
              "model_kwargs",
              "json_mode",
              "model_name",
              "openai_api_base",
              "api_key",
              "temperature",
              "seed",
              "max_retries",
              "timeout",
              "system_prompt",
              "tools",
              "input_value",
              "handle_parsing_errors",
              "verbose",
              "max_iterations",
              "agent_description",
              "memory",
              "sender",
              "sender_name",
              "n_messages",
              "session_id",
              "order",
              "template",
              "add_current_date_tool"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.post1"
          },
          "showNode": true,
          "type": "Agent",
          "id": "Agent-KPmxD",
          "description": "Define the agent's instructions, then enter a task to complete using tools.",
          "display_name": "Agent"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 624
        }
      },
      {
        "id": "Prompt-Ub0PD",
        "type": "genericNode",
        "position": {
          "x": 728.4778949324009,
          "y": 1085.061364399945
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.prompts.api_utils import process_prompt_template\nfrom langflow.custom import Component\nfrom langflow.inputs.inputs import DefaultPromptField\nfrom langflow.io import MessageTextInput, Output, PromptInput\nfrom langflow.schema.message import Message\nfrom langflow.template.utils import update_template_values\n\n\nclass PromptComponent(Component):\n    display_name: str = \"Prompt\"\n    description: str = \"Create a prompt template with dynamic variables.\"\n    icon = \"prompts\"\n    trace_type = \"prompt\"\n    name = \"Prompt\"\n\n    inputs = [\n        PromptInput(name=\"template\", display_name=\"Template\"),\n        MessageTextInput(\n            name=\"tool_placeholder\",\n            display_name=\"Tool Placeholder\",\n            tool_mode=True,\n            advanced=True,\n            info=\"A placeholder input for tool mode.\",\n        ),\n    ]\n\n    outputs = [\n        Output(display_name=\"Prompt Message\", name=\"prompt\", method=\"build_prompt\"),\n    ]\n\n    async def build_prompt(self) -> Message:\n        prompt = Message.from_template(**self._attributes)\n        self.status = prompt.text\n        return prompt\n\n    def _update_template(self, frontend_node: dict):\n        prompt_template = frontend_node[\"template\"][\"template\"][\"value\"]\n        custom_fields = frontend_node[\"custom_fields\"]\n        frontend_node_template = frontend_node[\"template\"]\n        _ = process_prompt_template(\n            template=prompt_template,\n            name=\"template\",\n            custom_fields=custom_fields,\n            frontend_node_template=frontend_node_template,\n        )\n        return frontend_node\n\n    async def update_frontend_node(self, new_frontend_node: dict, current_frontend_node: dict):\n        \"\"\"This function is called after the code validation is done.\"\"\"\n        frontend_node = await super().update_frontend_node(new_frontend_node, current_frontend_node)\n        template = frontend_node[\"template\"][\"template\"][\"value\"]\n        # Kept it duplicated for backwards compatibility\n        _ = process_prompt_template(\n            template=template,\n            name=\"template\",\n            custom_fields=frontend_node[\"custom_fields\"],\n            frontend_node_template=frontend_node[\"template\"],\n        )\n        # Now that template is updated, we need to grab any values that were set in the current_frontend_node\n        # and update the frontend_node with those values\n        update_template_values(new_template=frontend_node, previous_template=current_frontend_node[\"template\"])\n        return frontend_node\n\n    def _get_fallback_input(self, **kwargs):\n        return DefaultPromptField(**kwargs)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "template": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "template",
                "value": "You are a financial guru bot. Find information on the stock: {user_input} and perform comprehensive fundamental analysis of that stock for as of {curr_date}. \nYour output must include the following metrics: Gross Margin, Net Income, Revenue Growth (for next 6 months, 12 months, 3 years and 5 years), Operating revenue, Operating expenses, Market Position and Growth Drivers. Quantify each and every metric. \nUse the Serper API tool to fetch real-time stock information for the user's query - Keep in mind the {curr_date} while using the serper tool. Extract the relevant stock price and details from the API response and provide a summary. Provide any links for further user research. \nOur response must include the metrics and any comments/ analysis on the {user_input}. Do not include any cautionary messages.  ",
                "display_name": "Template",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "prompt",
                "_input_type": "PromptInput"
              },
              "tool_placeholder": {
                "tool_mode": true,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tool_placeholder",
                "value": "",
                "display_name": "Tool Placeholder",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "A placeholder input for tool mode.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "user_input": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "user_input",
                "display_name": "user_input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              },
              "curr_date": {
                "field_type": "str",
                "required": false,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "",
                "fileTypes": [],
                "file_path": "",
                "name": "curr_date",
                "display_name": "curr_date",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "load_from_db": false,
                "title_case": false,
                "type": "str"
              }
            },
            "description": "Create a prompt template with dynamic variables.",
            "icon": "prompts",
            "is_input": null,
            "is_output": null,
            "is_composition": null,
            "base_classes": [
              "Message"
            ],
            "name": "",
            "display_name": "Prompt",
            "documentation": "",
            "minimized": false,
            "custom_fields": {
              "template": [
                "user_input",
                "curr_date"
              ]
            },
            "output_types": [],
            "full_path": null,
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "prompt",
                "hidden": null,
                "display_name": "Prompt Message",
                "method": "build_prompt",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "template",
              "tool_placeholder"
            ],
            "beta": false,
            "legacy": false,
            "error": null,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.post1"
          },
          "showNode": true,
          "type": "Prompt",
          "id": "Prompt-Ub0PD"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 420
        }
      },
      {
        "id": "ChatOutput-ldIaw",
        "type": "genericNode",
        "position": {
          "x": 2265.2745693630404,
          "y": 1163.534984771582
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "background_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "background_color",
                "value": "",
                "display_name": "Background Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The background color of the icon.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "chat_icon": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "chat_icon",
                "value": "",
                "display_name": "Icon",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The icon of the message.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from langflow.base.io.chat import ChatComponent\nfrom langflow.inputs import BoolInput\nfrom langflow.io import DropdownInput, MessageInput, MessageTextInput, Output\nfrom langflow.schema.message import Message\nfrom langflow.schema.properties import Source\nfrom langflow.utils.constants import (\n    MESSAGE_SENDER_AI,\n    MESSAGE_SENDER_NAME_AI,\n    MESSAGE_SENDER_USER,\n)\n\n\nclass ChatOutput(ChatComponent):\n    display_name = \"Chat Output\"\n    description = \"Display a chat message in the Playground.\"\n    icon = \"MessagesSquare\"\n    name = \"ChatOutput\"\n    minimized = True\n\n    inputs = [\n        MessageInput(\n            name=\"input_value\",\n            display_name=\"Text\",\n            info=\"Message to be passed as output.\",\n        ),\n        BoolInput(\n            name=\"should_store_message\",\n            display_name=\"Store Messages\",\n            info=\"Store the message in the history.\",\n            value=True,\n            advanced=True,\n        ),\n        DropdownInput(\n            name=\"sender\",\n            display_name=\"Sender Type\",\n            options=[MESSAGE_SENDER_AI, MESSAGE_SENDER_USER],\n            value=MESSAGE_SENDER_AI,\n            advanced=True,\n            info=\"Type of sender.\",\n        ),\n        MessageTextInput(\n            name=\"sender_name\",\n            display_name=\"Sender Name\",\n            info=\"Name of the sender.\",\n            value=MESSAGE_SENDER_NAME_AI,\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"session_id\",\n            display_name=\"Session ID\",\n            info=\"The session ID of the chat. If empty, the current session ID parameter will be used.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"data_template\",\n            display_name=\"Data Template\",\n            value=\"{text}\",\n            advanced=True,\n            info=\"Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.\",\n        ),\n        MessageTextInput(\n            name=\"background_color\",\n            display_name=\"Background Color\",\n            info=\"The background color of the icon.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"chat_icon\",\n            display_name=\"Icon\",\n            info=\"The icon of the message.\",\n            advanced=True,\n        ),\n        MessageTextInput(\n            name=\"text_color\",\n            display_name=\"Text Color\",\n            info=\"The text color of the name\",\n            advanced=True,\n        ),\n    ]\n    outputs = [\n        Output(\n            display_name=\"Message\",\n            name=\"message\",\n            method=\"message_response\",\n        ),\n    ]\n\n    def _build_source(self, id_: str | None, display_name: str | None, source: str | None) -> Source:\n        source_dict = {}\n        if id_:\n            source_dict[\"id\"] = id_\n        if display_name:\n            source_dict[\"display_name\"] = display_name\n        if source:\n            source_dict[\"source\"] = source\n        return Source(**source_dict)\n\n    async def message_response(self) -> Message:\n        source, icon, display_name, source_id = self.get_properties_from_source_component()\n        background_color = self.background_color\n        text_color = self.text_color\n        if self.chat_icon:\n            icon = self.chat_icon\n        message = self.input_value if isinstance(self.input_value, Message) else Message(text=self.input_value)\n        message.sender = self.sender\n        message.sender_name = self.sender_name\n        message.session_id = self.session_id\n        message.flow_id = self.graph.flow_id if hasattr(self, \"graph\") else None\n        message.properties.source = self._build_source(source_id, display_name, source)\n        message.properties.icon = icon\n        message.properties.background_color = background_color\n        message.properties.text_color = text_color\n        if self.session_id and isinstance(message, Message) and self.should_store_message:\n            stored_message = await self.send_message(\n                message,\n            )\n            self.message.value = stored_message\n            message = stored_message\n\n        self.status = message\n        return message\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "data_template": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "data_template",
                "value": "{text}",
                "display_name": "Data Template",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Template to convert Data to Text. If left empty, it will be dynamically set to the Data's text key.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "input_value": {
                "trace_as_input": true,
                "tool_mode": false,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Text",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Message to be passed as output.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageInput"
              },
              "sender": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "options": [
                  "Machine",
                  "User"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender",
                "value": "Machine",
                "display_name": "Sender Type",
                "advanced": true,
                "dynamic": false,
                "info": "Type of sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              },
              "sender_name": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "sender_name",
                "value": "AI",
                "display_name": "Sender Name",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "Name of the sender.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "session_id": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "session_id",
                "value": "",
                "display_name": "Session ID",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The session ID of the chat. If empty, the current session ID parameter will be used.",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              },
              "should_store_message": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "should_store_message",
                "value": true,
                "display_name": "Store Messages",
                "advanced": true,
                "dynamic": false,
                "info": "Store the message in the history.",
                "title_case": false,
                "type": "bool",
                "_input_type": "BoolInput"
              },
              "text_color": {
                "tool_mode": false,
                "trace_as_input": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "text_color",
                "value": "",
                "display_name": "Text Color",
                "advanced": true,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "The text color of the name",
                "title_case": false,
                "type": "str",
                "_input_type": "MessageTextInput"
              }
            },
            "description": "Display a chat message in the Playground.",
            "icon": "MessagesSquare",
            "base_classes": [
              "Message"
            ],
            "display_name": "Chat Output",
            "documentation": "",
            "minimized": true,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "message",
                "display_name": "Message",
                "method": "message_response",
                "value": "__UNDEFINED__",
                "cache": true,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "input_value",
              "should_store_message",
              "sender",
              "sender_name",
              "session_id",
              "data_template",
              "background_color",
              "chat_icon",
              "text_color"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.post1"
          },
          "showNode": false,
          "type": "ChatOutput",
          "id": "ChatOutput-ldIaw"
        },
        "selected": false,
        "measured": {
          "width": 192,
          "height": 66
        }
      },
      {
        "id": "CurrentDate-IC788",
        "type": "genericNode",
        "position": {
          "x": 15,
          "y": 828.0592724485987
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from datetime import datetime\nfrom zoneinfo import ZoneInfo, available_timezones\n\nfrom loguru import logger\n\nfrom langflow.custom import Component\nfrom langflow.io import DropdownInput, Output\nfrom langflow.schema.message import Message\n\n\nclass CurrentDateComponent(Component):\n    display_name = \"Current Date\"\n    description = \"Returns the current date and time in the selected timezone.\"\n    icon = \"clock\"\n    name = \"CurrentDate\"\n\n    inputs = [\n        DropdownInput(\n            name=\"timezone\",\n            display_name=\"Timezone\",\n            options=list(available_timezones()),\n            value=\"UTC\",\n            info=\"Select the timezone for the current date and time.\",\n            tool_mode=True,\n        ),\n    ]\n    outputs = [\n        Output(display_name=\"Current Date\", name=\"current_date\", method=\"get_current_date\"),\n    ]\n\n    def get_current_date(self) -> Message:\n        try:\n            tz = ZoneInfo(self.timezone)\n            current_date = datetime.now(tz).strftime(\"%Y-%m-%d %H:%M:%S %Z\")\n            result = f\"Current date and time in {self.timezone}: {current_date}\"\n            self.status = result\n            return Message(text=result)\n        except Exception as e:  # noqa: BLE001\n            logger.opt(exception=True).debug(\"Error getting current date\")\n            error_message = f\"Error: {e}\"\n            self.status = error_message\n            return Message(text=error_message)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "timezone": {
                "tool_mode": true,
                "trace_as_metadata": true,
                "options": [
                  "America/Santo_Domingo",
                  "Pacific/Chuuk",
                  "America/Toronto",
                  "Asia/Sakhalin",
                  "EST",
                  "Etc/GMT-3",
                  "Europe/Berlin",
                  "Pacific/Funafuti",
                  "America/Kentucky/Monticello",
                  "Etc/GMT+0",
                  "Europe/Guernsey",
                  "America/North_Dakota/New_Salem",
                  "America/Nuuk",
                  "Europe/Uzhgorod",
                  "Asia/Aqtobe",
                  "America/Boise",
                  "America/Rosario",
                  "Indian/Christmas",
                  "America/Cayenne",
                  "Asia/Famagusta",
                  "America/Cayman",
                  "Africa/Lusaka",
                  "Indian/Kerguelen",
                  "Etc/GMT+8",
                  "Europe/Skopje",
                  "Asia/Damascus",
                  "America/Guayaquil",
                  "Etc/GMT-9",
                  "Europe/Simferopol",
                  "Europe/Paris",
                  "Asia/Shanghai",
                  "Europe/Madrid",
                  "Africa/Khartoum",
                  "Asia/Rangoon",
                  "Europe/Riga",
                  "America/Rio_Branco",
                  "Atlantic/Madeira",
                  "Pacific/Kosrae",
                  "Pacific/Gambier",
                  "Europe/Prague",
                  "Asia/Dacca",
                  "Atlantic/Stanley",
                  "America/Argentina/Cordoba",
                  "Europe/Isle_of_Man",
                  "America/Indiana/Petersburg",
                  "America/Pangnirtung",
                  "Indian/Maldives",
                  "Africa/Tripoli",
                  "Etc/GMT-5",
                  "Africa/Harare",
                  "HST",
                  "Asia/Dushanbe",
                  "Asia/Yekaterinburg",
                  "Etc/GMT+6",
                  "MST",
                  "Africa/Johannesburg",
                  "America/Paramaribo",
                  "US/Mountain",
                  "America/Edmonton",
                  "America/Tegucigalpa",
                  "Europe/Amsterdam",
                  "America/Argentina/Tucuman",
                  "Australia/Victoria",
                  "Asia/Singapore",
                  "Antarctica/Palmer",
                  "America/Indiana/Winamac",
                  "Asia/Ho_Chi_Minh",
                  "America/Manaus",
                  "Pacific/Nauru",
                  "Africa/Mbabane",
                  "America/Indiana/Marengo",
                  "Asia/Amman",
                  "Egypt",
                  "Canada/Atlantic",
                  "Asia/Yakutsk",
                  "America/Argentina/Mendoza",
                  "Pacific/Norfolk",
                  "America/Tijuana",
                  "NZ",
                  "Europe/Nicosia",
                  "Asia/Chita",
                  "America/Argentina/Jujuy",
                  "Indian/Comoro",
                  "America/La_Paz",
                  "America/Yakutat",
                  "US/Pacific",
                  "Asia/Samarkand",
                  "US/Hawaii",
                  "Africa/Djibouti",
                  "Etc/GMT-8",
                  "Europe/Zurich",
                  "Pacific/Wallis",
                  "Atlantic/South_Georgia",
                  "America/Nome",
                  "Pacific/Wake",
                  "Africa/Ndjamena",
                  "Europe/Budapest",
                  "Pacific/Kwajalein",
                  "Asia/Karachi",
                  "America/Matamoros",
                  "Africa/Tunis",
                  "Europe/Lisbon",
                  "America/Campo_Grande",
                  "Mexico/BajaNorte",
                  "America/Nipigon",
                  "America/Adak",
                  "Africa/Dakar",
                  "Zulu",
                  "Mexico/BajaSur",
                  "America/Indiana/Vevay",
                  "Asia/Manila",
                  "Turkey",
                  "Pacific/Tongatapu",
                  "Africa/Accra",
                  "Africa/Windhoek",
                  "Asia/Riyadh",
                  "Africa/Malabo",
                  "Etc/GMT+5",
                  "Pacific/Bougainville",
                  "Pacific/Pohnpei",
                  "Japan",
                  "Asia/Bahrain",
                  "Atlantic/Canary",
                  "Europe/Zaporozhye",
                  "Antarctica/DumontDUrville",
                  "America/Vancouver",
                  "US/Indiana-Starke",
                  "Europe/Minsk",
                  "Etc/GMT-7",
                  "Europe/Ulyanovsk",
                  "Asia/Pontianak",
                  "Africa/Asmera",
                  "Europe/Sarajevo",
                  "Cuba",
                  "Europe/Gibraltar",
                  "America/Antigua",
                  "Antarctica/Davis",
                  "PST8PDT",
                  "America/Asuncion",
                  "Africa/Asmara",
                  "Europe/Bratislava",
                  "Pacific/Ponape",
                  "America/Los_Angeles",
                  "Pacific/Palau",
                  "US/Central",
                  "Africa/Conakry",
                  "America/Swift_Current",
                  "Europe/Oslo",
                  "Europe/Kaliningrad",
                  "America/Santiago",
                  "Etc/GMT-6",
                  "NZ-CHAT",
                  "America/Guyana",
                  "Arctic/Longyearbyen",
                  "Greenwich",
                  "Africa/El_Aaiun",
                  "CST6CDT",
                  "America/Moncton",
                  "CET",
                  "Libya",
                  "America/Argentina/Rio_Gallegos",
                  "localtime",
                  "America/Phoenix",
                  "Etc/GMT-1",
                  "America/Jujuy",
                  "Asia/Novosibirsk",
                  "America/Yellowknife",
                  "Pacific/Tarawa",
                  "Europe/Sofia",
                  "Chile/EasterIsland",
                  "EST5EDT",
                  "Asia/Katmandu",
                  "Africa/Gaborone",
                  "Etc/UTC",
                  "America/Argentina/Ushuaia",
                  "Asia/Magadan",
                  "Eire",
                  "Pacific/Efate",
                  "Europe/Tiraspol",
                  "Asia/Vientiane",
                  "America/St_Kitts",
                  "Australia/Canberra",
                  "America/Creston",
                  "America/St_Thomas",
                  "America/Goose_Bay",
                  "Asia/Gaza",
                  "GMT",
                  "Asia/Pyongyang",
                  "Europe/Podgorica",
                  "Indian/Mayotte",
                  "Antarctica/Syowa",
                  "Pacific/Noumea",
                  "Etc/GMT-11",
                  "Pacific/Majuro",
                  "America/Miquelon",
                  "America/Dawson",
                  "Etc/GMT+10",
                  "Etc/GMT+7",
                  "America/Resolute",
                  "US/Aleutian",
                  "Europe/Kiev",
                  "Indian/Antananarivo",
                  "America/Fort_Wayne",
                  "America/Montevideo",
                  "Etc/GMT-4",
                  "America/Whitehorse",
                  "Etc/Zulu",
                  "Europe/Volgograd",
                  "Factory",
                  "Pacific/Kiritimati",
                  "America/St_Vincent",
                  "Pacific/Yap",
                  "America/Bogota",
                  "Asia/Yangon",
                  "Singapore",
                  "America/St_Lucia",
                  "Etc/Universal",
                  "Europe/Busingen",
                  "Asia/Jerusalem",
                  "Africa/Bissau",
                  "Asia/Dili",
                  "America/Havana",
                  "Etc/GMT+12",
                  "Africa/Ceuta",
                  "America/Argentina/Salta",
                  "Europe/Belfast",
                  "Antarctica/Vostok",
                  "America/Barbados",
                  "America/Guadeloupe",
                  "Africa/Douala",
                  "Asia/Dubai",
                  "Asia/Phnom_Penh",
                  "America/Rankin_Inlet",
                  "Europe/Kirov",
                  "Indian/Mauritius",
                  "Africa/Casablanca",
                  "America/Godthab",
                  "Etc/UCT",
                  "America/Fort_Nelson",
                  "Africa/Bamako",
                  "America/Argentina/San_Luis",
                  "Asia/Kuching",
                  "America/Danmarkshavn",
                  "Etc/GMT+3",
                  "America/Ensenada",
                  "Antarctica/Troll",
                  "America/Iqaluit",
                  "Etc/GMT+2",
                  "America/Noronha",
                  "America/Argentina/San_Juan",
                  "PRC",
                  "Europe/Mariehamn",
                  "Africa/Freetown",
                  "America/Denver",
                  "America/Rainy_River",
                  "Asia/Vladivostok",
                  "US/East-Indiana",
                  "Canada/Newfoundland",
                  "Asia/Colombo",
                  "Australia/Melbourne",
                  "America/Detroit",
                  "America/Argentina/Catamarca",
                  "America/Blanc-Sablon",
                  "America/Fortaleza",
                  "Asia/Kuwait",
                  "Pacific/Enderbury",
                  "America/Managua",
                  "Africa/Maputo",
                  "Europe/Vilnius",
                  "America/Santarem",
                  "America/Recife",
                  "EET",
                  "America/Kentucky/Louisville",
                  "Asia/Istanbul",
                  "Australia/Adelaide",
                  "Asia/Ulaanbaatar",
                  "Asia/Hebron",
                  "America/Anguilla",
                  "Jamaica",
                  "Etc/GMT-14",
                  "America/Regina",
                  "Brazil/Acre",
                  "Asia/Bangkok",
                  "Africa/Blantyre",
                  "America/Boa_Vista",
                  "Etc/GMT+11",
                  "Australia/LHI",
                  "Canada/Central",
                  "Europe/Warsaw",
                  "Africa/Sao_Tome",
                  "Africa/Banjul",
                  "Asia/Jakarta",
                  "Asia/Kabul",
                  "Europe/Ljubljana",
                  "Europe/Moscow",
                  "America/Indiana/Vincennes",
                  "Canada/Pacific",
                  "Europe/Monaco",
                  "America/Chihuahua",
                  "Canada/Yukon",
                  "America/Glace_Bay",
                  "Pacific/Galapagos",
                  "America/Sao_Paulo",
                  "Pacific/Port_Moresby",
                  "Africa/Dar_es_Salaam",
                  "Asia/Kuala_Lumpur",
                  "America/Indiana/Tell_City",
                  "GB-Eire",
                  "Asia/Urumqi",
                  "Pacific/Tahiti",
                  "Mexico/General",
                  "America/Montserrat",
                  "Asia/Baghdad",
                  "US/Michigan",
                  "America/Jamaica",
                  "Asia/Thimphu",
                  "Africa/Nairobi",
                  "Canada/Mountain",
                  "America/North_Dakota/Center",
                  "Canada/Eastern",
                  "Asia/Kashgar",
                  "Pacific/Easter",
                  "America/Shiprock",
                  "America/Winnipeg",
                  "Brazil/DeNoronha",
                  "Universal",
                  "Asia/Brunei",
                  "Europe/Andorra",
                  "Etc/GMT-0",
                  "Asia/Omsk",
                  "W-SU",
                  "Brazil/West",
                  "Africa/Brazzaville",
                  "Chile/Continental",
                  "Australia/Sydney",
                  "Antarctica/Macquarie",
                  "Brazil/East",
                  "America/Sitka",
                  "America/Maceio",
                  "Australia/Brisbane",
                  "Europe/Athens",
                  "Iran",
                  "America/Argentina/Buenos_Aires",
                  "Etc/GMT-12",
                  "Asia/Irkutsk",
                  "Europe/Astrakhan",
                  "Pacific/Honolulu",
                  "Atlantic/St_Helena",
                  "Indian/Reunion",
                  "Europe/Chisinau",
                  "Asia/Hovd",
                  "Asia/Atyrau",
                  "America/Bahia_Banderas",
                  "US/Samoa",
                  "Canada/Saskatchewan",
                  "Asia/Novokuznetsk",
                  "Asia/Barnaul",
                  "Pacific/Pitcairn",
                  "America/Kralendijk",
                  "Antarctica/Mawson",
                  "America/Nassau",
                  "Pacific/Chatham",
                  "America/St_Barthelemy",
                  "GMT-0",
                  "Asia/Almaty",
                  "Hongkong",
                  "Australia/Yancowinna",
                  "Africa/Algiers",
                  "Pacific/Guadalcanal",
                  "Asia/Choibalsan",
                  "Africa/Lome",
                  "Africa/Bangui",
                  "Antarctica/Rothera",
                  "America/Menominee",
                  "America/Mazatlan",
                  "Australia/Lindeman",
                  "Asia/Bishkek",
                  "Europe/Stockholm",
                  "Europe/Saratov",
                  "Navajo",
                  "Europe/Kyiv",
                  "Portugal",
                  "America/Atka",
                  "Pacific/Saipan",
                  "Pacific/Rarotonga",
                  "Asia/Anadyr",
                  "America/Hermosillo",
                  "Africa/Ouagadougou",
                  "Asia/Aden",
                  "Asia/Hong_Kong",
                  "America/Buenos_Aires",
                  "Africa/Nouakchott",
                  "Europe/Zagreb",
                  "Asia/Dhaka",
                  "Asia/Krasnoyarsk",
                  "America/Bahia",
                  "Europe/Tirane",
                  "America/Cambridge_Bay",
                  "America/North_Dakota/Beulah",
                  "Etc/GMT-10",
                  "Europe/Brussels",
                  "Kwajalein",
                  "Africa/Libreville",
                  "Africa/Lubumbashi",
                  "Africa/Bujumbura",
                  "GMT0",
                  "Asia/Muscat",
                  "America/Costa_Rica",
                  "Africa/Maseru",
                  "Pacific/Johnston",
                  "America/Porto_Velho",
                  "Europe/London",
                  "Australia/Perth",
                  "America/Mendoza",
                  "Europe/Rome",
                  "America/Juneau",
                  "Africa/Mogadishu",
                  "Asia/Tashkent",
                  "America/Monterrey",
                  "Asia/Kolkata",
                  "America/St_Johns",
                  "Asia/Aqtau",
                  "Indian/Mahe",
                  "Africa/Luanda",
                  "Pacific/Fakaofo",
                  "Asia/Ulan_Bator",
                  "ROK",
                  "US/Alaska",
                  "Europe/Bucharest",
                  "Etc/GMT0",
                  "Asia/Harbin",
                  "Australia/West",
                  "UTC",
                  "Pacific/Fiji",
                  "Asia/Kamchatka",
                  "Africa/Monrovia",
                  "Australia/Currie",
                  "Pacific/Guam",
                  "America/Punta_Arenas",
                  "GMT+0",
                  "Etc/GMT+9",
                  "Europe/Vaduz",
                  "Australia/NSW",
                  "US/Eastern",
                  "Europe/Belgrade",
                  "America/Merida",
                  "Israel",
                  "Asia/Thimbu",
                  "America/Port-au-Prince",
                  "America/Dawson_Creek",
                  "Atlantic/Faeroe",
                  "America/Thule",
                  "America/Puerto_Rico",
                  "Europe/Helsinki",
                  "America/New_York",
                  "Asia/Baku",
                  "Asia/Macao",
                  "America/Port_of_Spain",
                  "Pacific/Auckland",
                  "America/Ciudad_Juarez",
                  "Australia/ACT",
                  "America/Indiana/Indianapolis",
                  "America/Knox_IN",
                  "Pacific/Pago_Pago",
                  "Atlantic/Faroe",
                  "Asia/Srednekolymsk",
                  "Atlantic/Cape_Verde",
                  "Asia/Kathmandu",
                  "Africa/Lagos",
                  "MST7MDT",
                  "Africa/Niamey",
                  "America/Louisville",
                  "America/Coral_Harbour",
                  "America/Cordoba",
                  "Europe/Vienna",
                  "Europe/Copenhagen",
                  "America/Marigot",
                  "America/Anchorage",
                  "America/Caracas",
                  "Asia/Nicosia",
                  "Africa/Timbuktu",
                  "Africa/Cairo",
                  "America/Grenada",
                  "ROC",
                  "Europe/San_Marino",
                  "UCT",
                  "Etc/GMT+4",
                  "Australia/Tasmania",
                  "Europe/Jersey",
                  "America/Catamarca",
                  "Asia/Chongqing",
                  "America/Cancun",
                  "Antarctica/McMurdo",
                  "Africa/Juba",
                  "Australia/Darwin",
                  "America/Montreal",
                  "Asia/Seoul",
                  "America/Panama",
                  "Asia/Ashgabat",
                  "Africa/Abidjan",
                  "America/Porto_Acre",
                  "Africa/Kampala",
                  "Asia/Qostanay",
                  "America/Chicago",
                  "Asia/Ujung_Pandang",
                  "Asia/Tokyo",
                  "Pacific/Truk",
                  "Pacific/Marquesas",
                  "America/Belem",
                  "America/Guatemala",
                  "Australia/North",
                  "America/Thunder_Bay",
                  "America/Indiana/Knox",
                  "Asia/Ust-Nera",
                  "America/Scoresbysund",
                  "Asia/Macau",
                  "Asia/Qatar",
                  "Australia/Eucla",
                  "Europe/Dublin",
                  "Pacific/Midway",
                  "Australia/Queensland",
                  "America/Ojinaga",
                  "GB",
                  "Iceland",
                  "Europe/Tallinn",
                  "America/Martinique",
                  "Atlantic/Bermuda",
                  "Australia/Broken_Hill",
                  "Europe/Luxembourg",
                  "Asia/Qyzylorda",
                  "America/Argentina/La_Rioja",
                  "Pacific/Kanton",
                  "America/Belize",
                  "America/Inuvik",
                  "MET",
                  "Atlantic/Jan_Mayen",
                  "Asia/Saigon",
                  "America/Santa_Isabel",
                  "Etc/GMT-2",
                  "America/Curacao",
                  "America/Dominica",
                  "Asia/Yerevan",
                  "Asia/Tehran",
                  "Europe/Istanbul",
                  "WET",
                  "America/Indianapolis",
                  "Etc/GMT+1",
                  "America/Virgin",
                  "Asia/Jayapura",
                  "Australia/Lord_Howe",
                  "Etc/GMT-13",
                  "Africa/Addis_Ababa",
                  "Atlantic/Azores",
                  "America/Cuiaba",
                  "Etc/Greenwich",
                  "Africa/Kinshasa",
                  "America/Lower_Princes",
                  "America/Araguaina",
                  "Asia/Ashkhabad",
                  "Australia/South",
                  "Asia/Makassar",
                  "America/Eirunepe",
                  "Africa/Porto-Novo",
                  "Europe/Vatican",
                  "Asia/Tel_Aviv",
                  "Pacific/Apia",
                  "Asia/Khandyga",
                  "Asia/Taipei",
                  "Europe/Samara",
                  "America/Metlakatla",
                  "Asia/Tbilisi",
                  "America/Lima",
                  "America/Halifax",
                  "America/El_Salvador",
                  "Poland",
                  "America/Mexico_City",
                  "America/Aruba",
                  "America/Atikokan",
                  "Asia/Calcutta",
                  "Pacific/Niue",
                  "America/Tortola",
                  "America/Argentina/ComodRivadavia",
                  "Asia/Beirut",
                  "Asia/Chungking",
                  "US/Arizona",
                  "America/Grand_Turk",
                  "Etc/GMT",
                  "Australia/Hobart",
                  "Pacific/Samoa",
                  "Atlantic/Reykjavik",
                  "Asia/Tomsk",
                  "Asia/Oral",
                  "Indian/Chagos",
                  "Indian/Cocos",
                  "Antarctica/South_Pole",
                  "Antarctica/Casey",
                  "Europe/Malta",
                  "Africa/Kigali"
                ],
                "options_metadata": [],
                "combobox": false,
                "dialog_inputs": {},
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "timezone",
                "value": "America/Chicago",
                "display_name": "Timezone",
                "advanced": false,
                "dynamic": false,
                "info": "Select the timezone for the current date and time.",
                "title_case": false,
                "type": "str",
                "_input_type": "DropdownInput"
              }
            },
            "description": "Returns the current date and time in the selected timezone.",
            "icon": "clock",
            "base_classes": [
              "Message"
            ],
            "display_name": "Current Date",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Message"
                ],
                "selected": "Message",
                "name": "current_date",
                "hidden": null,
                "display_name": "Current Date",
                "method": "get_current_date",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "timezone"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": false,
            "lf_version": "1.1.4.post1"
          },
          "showNode": true,
          "type": "CurrentDate",
          "id": "CurrentDate-IC788"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 249
        }
      },
      {
        "id": "Serp-snePS",
        "type": "genericNode",
        "position": {
          "x": 1041.0194598750504,
          "y": 388.9241044503651
        },
        "data": {
          "node": {
            "template": {
              "_type": "Component",
              "code": {
                "type": "code",
                "required": true,
                "placeholder": "",
                "list": false,
                "show": true,
                "multiline": true,
                "value": "from typing import Any\n\nfrom langchain_community.utilities.serpapi import SerpAPIWrapper\nfrom langchain_core.tools import ToolException\nfrom loguru import logger\nfrom pydantic import BaseModel, Field\n\nfrom langflow.custom import Component\nfrom langflow.inputs import DictInput, IntInput, MultilineInput, SecretStrInput\nfrom langflow.io import Output\nfrom langflow.schema import Data\nfrom langflow.schema.message import Message\n\n\nclass SerpAPISchema(BaseModel):\n    \"\"\"Schema for SerpAPI search parameters.\"\"\"\n\n    query: str = Field(..., description=\"The search query\")\n    params: dict[str, Any] | None = Field(\n        default={\n            \"engine\": \"google\",\n            \"google_domain\": \"google.com\",\n            \"gl\": \"us\",\n            \"hl\": \"en\",\n        },\n        description=\"Additional search parameters\",\n    )\n    max_results: int = Field(5, description=\"Maximum number of results to return\")\n    max_snippet_length: int = Field(100, description=\"Maximum length of each result snippet\")\n\n\nclass SerpComponent(Component):\n    display_name = \"Serp Search API\"\n    description = \"Call Serp Search API with result limiting\"\n    name = \"Serp\"\n    icon = \"SerpSearch\"\n\n    inputs = [\n        SecretStrInput(name=\"serpapi_api_key\", display_name=\"SerpAPI API Key\", required=True),\n        MultilineInput(\n            name=\"input_value\",\n            display_name=\"Input\",\n            tool_mode=True,\n        ),\n        DictInput(name=\"search_params\", display_name=\"Parameters\", advanced=True, is_list=True),\n        IntInput(name=\"max_results\", display_name=\"Max Results\", value=5, advanced=True),\n        IntInput(name=\"max_snippet_length\", display_name=\"Max Snippet Length\", value=100, advanced=True),\n    ]\n\n    outputs = [\n        Output(display_name=\"Data\", name=\"data\", method=\"fetch_content\"),\n        Output(display_name=\"Text\", name=\"text\", method=\"fetch_content_text\"),\n    ]\n\n    def _build_wrapper(self, params: dict[str, Any] | None = None) -> SerpAPIWrapper:\n        \"\"\"Build a SerpAPIWrapper with the provided parameters.\"\"\"\n        params = params or {}\n        if params:\n            return SerpAPIWrapper(\n                serpapi_api_key=self.serpapi_api_key,\n                params=params,\n            )\n        return SerpAPIWrapper(serpapi_api_key=self.serpapi_api_key)\n\n    def run_model(self) -> list[Data]:\n        return self.fetch_content()\n\n    def fetch_content(self) -> list[Data]:\n        wrapper = self._build_wrapper(self.search_params)\n\n        def search_func(\n            query: str, params: dict[str, Any] | None = None, max_results: int = 5, max_snippet_length: int = 100\n        ) -> list[Data]:\n            try:\n                local_wrapper = wrapper\n                if params:\n                    local_wrapper = self._build_wrapper(params)\n\n                full_results = local_wrapper.results(query)\n                organic_results = full_results.get(\"organic_results\", [])[:max_results]\n\n                limited_results = [\n                    Data(\n                        text=result.get(\"snippet\", \"\"),\n                        data={\n                            \"title\": result.get(\"title\", \"\")[:max_snippet_length],\n                            \"link\": result.get(\"link\", \"\"),\n                            \"snippet\": result.get(\"snippet\", \"\")[:max_snippet_length],\n                        },\n                    )\n                    for result in organic_results\n                ]\n\n            except Exception as e:\n                error_message = f\"Error in SerpAPI search: {e!s}\"\n                logger.debug(error_message)\n                raise ToolException(error_message) from e\n            return limited_results\n\n        results = search_func(\n            self.input_value,\n            params=self.search_params,\n            max_results=self.max_results,\n            max_snippet_length=self.max_snippet_length,\n        )\n        self.status = results\n        return results\n\n    def fetch_content_text(self) -> Message:\n        data = self.fetch_content()\n        result_string = \"\"\n        for item in data:\n            result_string += item.text + \"\\n\"\n        self.status = result_string\n        return Message(text=result_string)\n",
                "fileTypes": [],
                "file_path": "",
                "password": false,
                "name": "code",
                "advanced": true,
                "dynamic": true,
                "info": "",
                "load_from_db": false,
                "title_case": false
              },
              "input_value": {
                "tool_mode": true,
                "trace_as_input": true,
                "multiline": true,
                "trace_as_metadata": true,
                "load_from_db": false,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "input_value",
                "value": "",
                "display_name": "Input",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "str",
                "_input_type": "MultilineInput"
              },
              "max_results": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_results",
                "value": 5,
                "display_name": "Max Results",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "max_snippet_length": {
                "tool_mode": false,
                "trace_as_metadata": true,
                "list": false,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "max_snippet_length",
                "value": 100,
                "display_name": "Max Snippet Length",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "int",
                "_input_type": "IntInput"
              },
              "search_params": {
                "tool_mode": false,
                "trace_as_input": true,
                "list": true,
                "list_add_label": "Add More",
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "search_params",
                "value": {},
                "display_name": "Parameters",
                "advanced": true,
                "dynamic": false,
                "info": "",
                "title_case": false,
                "type": "dict",
                "_input_type": "DictInput"
              },
              "serpapi_api_key": {
                "load_from_db": true,
                "required": true,
                "placeholder": "",
                "show": true,
                "name": "serpapi_api_key",
                "value": "",
                "display_name": "SerpAPI API Key",
                "advanced": false,
                "input_types": [
                  "Message"
                ],
                "dynamic": false,
                "info": "",
                "title_case": false,
                "password": true,
                "type": "str",
                "_input_type": "SecretStrInput"
              },
              "tools_metadata": {
                "tool_mode": false,
                "is_list": true,
                "list_add_label": "Add More",
                "table_schema": {
                  "columns": [
                    {
                      "name": "name",
                      "display_name": "Tool Name",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Specify the name of the tool.",
                      "disable_edit": false,
                      "edit_mode": "inline",
                      "formatter": "text"
                    },
                    {
                      "name": "description",
                      "display_name": "Tool Description",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "Describe the purpose of the tool.",
                      "disable_edit": false,
                      "edit_mode": "popover",
                      "formatter": "text"
                    },
                    {
                      "name": "tags",
                      "display_name": "Tool Identifiers",
                      "sortable": false,
                      "filterable": false,
                      "type": "text",
                      "description": "The default identifiers for the tools and cannot be changed.",
                      "disable_edit": true,
                      "edit_mode": "inline",
                      "formatter": "text"
                    }
                  ]
                },
                "trigger_text": "",
                "trigger_icon": "Hammer",
                "table_icon": "Hammer",
                "table_options": {
                  "block_add": true,
                  "block_delete": true,
                  "block_edit": true,
                  "block_sort": true,
                  "block_filter": true,
                  "block_hide": true,
                  "block_select": true,
                  "hide_options": true,
                  "field_parsers": {
                    "name": [
                      "snake_case",
                      "no_blank"
                    ],
                    "commands": "commands"
                  },
                  "description": "Modify tool names and descriptions to help agents understand when to use each tool."
                },
                "trace_as_metadata": true,
                "required": false,
                "placeholder": "",
                "show": true,
                "name": "tools_metadata",
                "value": [
                  {
                    "name": "Serp-fetch_content",
                    "description": "fetch_content(serpapi_api_key: Message) - Call Serp Search API with result limiting",
                    "tags": [
                      "Serp-fetch_content"
                    ]
                  },
                  {
                    "name": "Serp-fetch_content_text",
                    "description": "fetch_content_text(serpapi_api_key: Message) - Call Serp Search API with result limiting",
                    "tags": [
                      "Serp-fetch_content_text"
                    ]
                  }
                ],
                "display_name": "Edit tools",
                "advanced": false,
                "dynamic": false,
                "info": "",
                "real_time_refresh": true,
                "title_case": false,
                "type": "table",
                "_input_type": "TableInput"
              }
            },
            "description": "Call Serp Search API with result limiting",
            "icon": "SerpSearch",
            "base_classes": [
              "Data",
              "Message"
            ],
            "display_name": "Serp Search API",
            "documentation": "",
            "minimized": false,
            "custom_fields": {},
            "output_types": [],
            "pinned": false,
            "conditional_paths": [],
            "frozen": false,
            "outputs": [
              {
                "types": [
                  "Tool"
                ],
                "selected": "Tool",
                "name": "component_as_tool",
                "hidden": null,
                "display_name": "Toolset",
                "method": "to_toolkit",
                "value": "__UNDEFINED__",
                "cache": true,
                "required_inputs": null,
                "allows_loop": false,
                "tool_mode": true
              }
            ],
            "field_order": [
              "serpapi_api_key",
              "input_value",
              "search_params",
              "max_results",
              "max_snippet_length"
            ],
            "beta": false,
            "legacy": false,
            "edited": false,
            "metadata": {},
            "tool_mode": true,
            "lf_version": "1.1.4.post1"
          },
          "showNode": true,
          "type": "Serp",
          "id": "Serp-snePS"
        },
        "selected": false,
        "measured": {
          "width": 320,
          "height": 396
        }
      }
    ],
    "edges": [
      {
        "source": "Prompt-Ub0PD",
        "target": "Agent-KPmxD",
        "sourceHandle": "{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ub0PDœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Prompt-Ub0PD{œdataTypeœ:œPromptœ,œidœ:œPrompt-Ub0PDœ,œnameœ:œpromptœ,œoutput_typesœ:[œMessageœ]}-Agent-KPmxD{œfieldNameœ:œsystem_promptœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Prompt",
            "id": "Prompt-Ub0PD",
            "name": "prompt",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "system_prompt",
            "id": "Agent-KPmxD",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-zVDjM",
        "target": "Agent-KPmxD",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-zVDjMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatInput-zVDjM{œdataTypeœ:œChatInputœ,œidœ:œChatInput-zVDjMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Agent-KPmxD{œfieldNameœ:œinput_valueœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-zVDjM",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "Agent-KPmxD",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "Agent-KPmxD",
        "target": "ChatOutput-ldIaw",
        "sourceHandle": "{œdataTypeœ:œAgentœ,œidœ:œAgent-KPmxDœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ldIawœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-Agent-KPmxD{œdataTypeœ:œAgentœ,œidœ:œAgent-KPmxDœ,œnameœ:œresponseœ,œoutput_typesœ:[œMessageœ]}-ChatOutput-ldIaw{œfieldNameœ:œinput_valueœ,œidœ:œChatOutput-ldIawœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Agent",
            "id": "Agent-KPmxD",
            "name": "response",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "input_value",
            "id": "ChatOutput-ldIaw",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "ChatInput-zVDjM",
        "target": "Prompt-Ub0PD",
        "sourceHandle": "{œdataTypeœ:œChatInputœ,œidœ:œChatInput-zVDjMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-Ub0PDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-ChatInput-zVDjM{œdataTypeœ:œChatInputœ,œidœ:œChatInput-zVDjMœ,œnameœ:œmessageœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ub0PD{œfieldNameœ:œuser_inputœ,œidœ:œPrompt-Ub0PDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "ChatInput",
            "id": "ChatInput-zVDjM",
            "name": "message",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "user_input",
            "id": "Prompt-Ub0PD",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "Serp-snePS",
        "target": "Agent-KPmxD",
        "sourceHandle": "{œdataTypeœ:œSerpœ,œidœ:œSerp-snePSœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}",
        "targetHandle": "{œfieldNameœ:œtoolsœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "id": "reactflow__edge-Serp-snePS{œdataTypeœ:œSerpœ,œidœ:œSerp-snePSœ,œnameœ:œcomponent_as_toolœ,œoutput_typesœ:[œToolœ]}-Agent-KPmxD{œfieldNameœ:œtoolsœ,œidœ:œAgent-KPmxDœ,œinputTypesœ:[œToolœ],œtypeœ:œotherœ}",
        "data": {
          "sourceHandle": {
            "dataType": "Serp",
            "id": "Serp-snePS",
            "name": "component_as_tool",
            "output_types": [
              "Tool"
            ]
          },
          "targetHandle": {
            "fieldName": "tools",
            "id": "Agent-KPmxD",
            "inputTypes": [
              "Tool"
            ],
            "type": "other"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      },
      {
        "source": "CurrentDate-IC788",
        "target": "Prompt-Ub0PD",
        "sourceHandle": "{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-IC788œ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}",
        "targetHandle": "{œfieldNameœ:œcurr_dateœ,œidœ:œPrompt-Ub0PDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "id": "reactflow__edge-CurrentDate-IC788{œdataTypeœ:œCurrentDateœ,œidœ:œCurrentDate-IC788œ,œnameœ:œcurrent_dateœ,œoutput_typesœ:[œMessageœ]}-Prompt-Ub0PD{œfieldNameœ:œcurr_dateœ,œidœ:œPrompt-Ub0PDœ,œinputTypesœ:[œMessageœ],œtypeœ:œstrœ}",
        "data": {
          "sourceHandle": {
            "dataType": "CurrentDate",
            "id": "CurrentDate-IC788",
            "name": "current_date",
            "output_types": [
              "Message"
            ]
          },
          "targetHandle": {
            "fieldName": "curr_date",
            "id": "Prompt-Ub0PD",
            "inputTypes": [
              "Message"
            ],
            "type": "str"
          }
        },
        "selected": false,
        "animated": false,
        "className": ""
      }
    ],
    "viewport": {
      "x": 358.4928459768627,
      "y": 55.54341941705826,
      "zoom": 0.3454411388762731
    }
  },
  "description": "Advanced NLP for Groundbreaking Business Solutions.",
  "name": "algOracle",
  "last_tested_version": "1.1.4.post1",
  "endpoint_name": "algoracle",
  "is_component": false
}